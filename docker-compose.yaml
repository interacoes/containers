services:
  # Backend (Java/DSpace)
  backend:
    container_name: backend
    image: interacoes-backend-image:${DSPACE_VER:-latest}
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      # Below syntax may look odd, but it is how to override dspace.cfg settings via env variables.
      # See https://github.com/DSpace/DSpace/blob/main/dspace/config/config-definition.xml
      # __P__ => "." (e.g. dspace__P__dir => dspace.dir)
      # __D__ => "-" (e.g. google__D__metadata => google-metadata)
      # dspace.dir: Must match with Dockerfile's DSPACE_INSTALL directory.
      dspace__P__dir: /backend/dspace
      # Uncomment to set a non-default value for dspace.server.url or dspace.ui.url
      # dspace__P__server__P__url: http://localhost:8080/server
      # dspace__P__ui__P__url: http://localhost:4000
      dspace__P__name: 'DSpace Started with Docker Compose'
      # proxies.trusted.ipranges: This setting is required for a REST API running in Docker to trust requests
      # from the host machine. This IP range MUST correspond to the 'dspacenet' subnet defined above.
      proxies__P__trusted__P__ipranges: '172.23.0'
      LOGGING_CONFIG: /dspace/config/log4j2-container.xml
      db__P__url: 'jdbc:postgresql://dspacedb:5432/dspace'
      db__P__username: dspace  # Usuário do banco de dados
      db__P__password: dspace    # Senha do banco de dados
      solr__P__server: http://dspacesolr:8983/solr
      dspace__P__server__P__url: http://backend:8080/server
      dspace__P__ui__P__url: http://frontend:4000
    ports:
    - published: 8080
      target: 8080
    - published: 8000
      target: 8000
    stdin_open: true
    tty: true
    depends_on:
      dspacedb:
        condition: service_healthy
      dspacesolr:
         condition: service_healthy
    volumes:
    # Keep DSpace assetstore directory between reboots
    - assetstore:/backend/dspace/assetstore
    # Mount local [src]/dspace/config/ to container. This syncs your local configs with container
    # NOTE: Environment variables specified above will OVERRIDE any configs in local.cfg or dspace.cfg
    - ./backend/dspace/config:/dspace/config
    # Ensure that the database is ready BEFORE starting tomcat
    # 1. While a TCP connection to dspacedb port 5432 is not available, continue to sleep
    # 2. Then, run database migration to init database tables
    # 3. Finally, start DSpace
    entrypoint:
    - /bin/bash
    - '-c'
    - |
      while (!</dev/tcp/dspacedb/5432) > /dev/null 2>&1; do sleep 1; done;
      /dspace/bin/dspace database migrate
      java -jar /dspace/webapps/server-boot.jar --dspace.dir=/dspace
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dspacenet


  # Banco de dados (PostgreSQL)
  dspacedb:
    container_name: dspacedb
    # Uses a custom Postgres image with pgcrypto installed
    image: "${DOCKER_OWNER:-dspace}/dspace-postgres-pgcrypto:${DSPACE_VER:-latest}"
    build:
      # Must build out of subdirectory to have access to install script for pgcrypto
      context: ./backend/dspace/src/main/docker/dspace-postgres-pgcrypto/
    environment:
      PGDATA: /pgdata
      POSTGRES_PASSWORD: dspace
      POSTGRES_USER: dspace
    networks:
      dspacenet:
    ports:
    - published: 5432
      target: 5432
    stdin_open: true
    tty: true
    volumes:
    # Keep Postgres data directory between reboots
    - pgdata:/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dspace"]
      interval: 5s
      timeout: 5s
      retries: 10

  #PgAdmin
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: interacoes@admin.com  # Altere para seu email
      PGADMIN_DEFAULT_PASSWORD: admin123      # Altere para uma senha segura
    ports:
      - "5050:80"  # Acessível em http://localhost:5050
    networks:
      - dspacenet
    depends_on:
      - dspacedb
    volumes:
      - pgadmin-data:/var/lib/pgadmin  
  
  # Solr
  dspacesolr:
    container_name: dspacesolr
    image: "${DOCKER_OWNER:-dspace}/dspace-solr:${DSPACE_VER:-latest}"
    build:
      context: ./backend/dspace/src/main/docker/dspace-solr/
      # Provide path to Solr configs necessary to build Docker image
      additional_contexts:
        solrconfigs: ./backend/dspace/solr/
      args:
        SOLR_VERSION: "${SOLR_VER:-8.11}"
    networks:
      dspacenet:
    ports:
    - published: 8983
      target: 8983
    stdin_open: true
    tty: true
    working_dir: /var/solr/data
    volumes:
    # Keep Solr data directory between reboots
    - solr_data:/var/solr/data
    # Initialize all DSpace Solr cores then start Solr:
    # * First, run precreate-core to create the core (if it doesn't yet exist). If exists already, this is a no-op
    # * Second, copy configsets to this core:
    #   Updates to Solr configs require the container to be rebuilt/restarted: `docker compose -p d7 up -d --build dspacesolr`
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8983/solr"]  # Verifica se o Solr está pronto
      interval: 10s
      timeout: 5s
      retries: 10   
    entrypoint:
    - /bin/bash
    - '-c'
    - |
      init-var-solr
      precreate-core authority /opt/solr/server/solr/configsets/authority
      cp -r /opt/solr/server/solr/configsets/authority/* authority
      precreate-core oai /opt/solr/server/solr/configsets/oai
      cp -r /opt/solr/server/solr/configsets/oai/* oai
      precreate-core search /opt/solr/server/solr/configsets/search
      cp -r /opt/solr/server/solr/configsets/search/* search
      precreate-core statistics /opt/solr/server/solr/configsets/statistics
      cp -r /opt/solr/server/solr/configsets/statistics/* statistics
      precreate-core qaevent /opt/solr/server/solr/configsets/qaevent
      cp -r /opt/solr/server/solr/configsets/qaevent/* qaevent
      precreate-core suggestion /opt/solr/server/solr/configsets/suggestion
      cp -r /opt/solr/server/solr/configsets/suggestion/* suggestion
      exec solr -f

  # Frontend (Angular)
  frontend:
    container_name: frontend
    image: interacoes-frontend-image:${DSPACE_VER:-latest}
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
    ports:
      - "4001:4001"
    depends_on:
      - backend
    networks:
      - dspacenet

  # Nginx (Proxy Reverso)
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "81:81"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - dspacenet

networks:
  dspacenet:
    driver: bridge

volumes:
  assetstore:
  pgdata:
  solr_data:
